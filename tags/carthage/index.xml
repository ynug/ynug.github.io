<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Carthage on 日々の蓄積</title>
    <link>https://ynug.github.io/tags/carthage/</link>
    <description>日々の蓄積 (Carthage)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 07 Feb 2021 01:14:20 +0900</lastBuildDate>
    
    <atom:link href="https://ynug.github.io/tags/carthage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOSのパッケージ管理ツールはどれが良いのか？</title>
      <link>https://ynug.github.io/posts/ios-package-management-tool/</link>
      <pubDate>Sun, 07 Feb 2021 01:14:20 +0900</pubDate>
      
      <guid>https://ynug.github.io/posts/ios-package-management-tool/</guid>
      <description>&lt;p&gt;結論をいうと &lt;code&gt;CocoaPods&lt;/code&gt; が良いかなと思います。&lt;/p&gt;
&lt;p&gt;私のパッケージ管理ツールの変遷としては、まず&lt;code&gt;CocoaPods&lt;/code&gt;を数年利用していました。&lt;br&gt;
その後は、&lt;code&gt;CocoaPods&lt;/code&gt;と&lt;code&gt;Carthage&lt;/code&gt;を併用していて、ライブラリの整備が完了した時点で完全に&lt;code&gt;Carthage&lt;/code&gt;に移行しました。&lt;br&gt;
Xcode12からは一手間加えないと&lt;code&gt;Carthage&lt;/code&gt;が利用できなくなってしまったので、いい機会だと思い&lt;code&gt;Swift Package Manager&lt;/code&gt;に移行しました。&lt;br&gt;
２ヶ月くらい使ったのですが、&lt;code&gt;CocoaPods&lt;/code&gt;に戻ることにしました。&lt;/p&gt;
&lt;p&gt;個人的に使ってみた感じのそれぞれのメリットデメリットを記載します。&lt;/p&gt;
&lt;h2 id=&#34;cocoapodshttpsgithubcomcocoapodscocoapods&#34;&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34; target=&#34;_blank&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;メリット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリをgit管理しておくと、cloneしただけでビルドができる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;デメリット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xcworkspaceができてプロジェクトが汚染される&lt;/li&gt;
&lt;li&gt;ビルドに時間がかかる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CocoaPods&lt;/code&gt;の初期化に時間がかかる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;carthagehttpsgithubcomcarthagecarthage&#34;&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34; target=&#34;_blank&#34;&gt;Carthage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;メリット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CocoaPods&lt;/code&gt;と違いプロジェクトが汚染されない&lt;/li&gt;
&lt;li&gt;ライブラリは事前にビルドされるので、プロジェクトのビルドが早い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;デメリット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリをgit管理していても、ビルドする時に&lt;code&gt;Carthage&lt;/code&gt;が入っていないとビルド出来ない&lt;/li&gt;
&lt;li&gt;Swiftのバージョンが上がるたびにエラーが出る(SwiftのABIが安定したので解決してるかもしれない)&lt;/li&gt;
&lt;li&gt;Xcode12からは一手間加えないとビルドが通らない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;swift-package-managerhttpsswiftorgpackage-manager&#34;&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34; target=&#34;_blank&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;メリット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcode標準でサポートしているので、ライブラリの追加削除が簡単&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;デメリット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリをプロジェクトと一緒にgit管理ができない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商用プロジェクトの場合は、ライブラリをgit管理できない&lt;code&gt;Swift Package Manager&lt;/code&gt;のリスクは大きいかなと思います。&lt;br&gt;
実際に、ある企業が出しているiOS向けのライブラリで使っていたのですが、利用しているtagが消えて大騒ぎしたことがあります。&lt;br&gt;
デモプロジェクトで使う分には、簡単にライブラリを組み込めるのでおすすめです。&lt;/p&gt;
&lt;p&gt;商用利用するとなると&lt;code&gt;CocoaPods&lt;/code&gt;か&lt;code&gt;Carthage&lt;/code&gt;かと思いますが、&lt;code&gt;Carthage&lt;/code&gt;の場合はビルド時に必要なので、開発とは別のPCでクローンしてビルドしようとした時にすぐに動かせないことがあります。&lt;br&gt;
プロジェクトの汚染が我慢できるなら&lt;code&gt;CocoaPods&lt;/code&gt;が一番手軽で安全だと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
